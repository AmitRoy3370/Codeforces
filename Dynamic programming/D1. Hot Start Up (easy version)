import java.util.Scanner;

public class MyClass {
    
    static Scanner in = new Scanner(System.in);
    
    static int testCases, n, k;
    
    static int a[];
    
    static long cold[], hot[];
    
    static long solve(int i, int prev, long dp[][]) {
        
        if(i >= n) {
            
            return 0L;
            
        }
        
        if(dp[i][prev] != -1L) {
            
            return dp[i][prev];
            
        }
        
        if(a[i] == a[i - 1]) {
            
            dp[i][prev] = hot[a[i]] + solve(i + 1, prev, dp);
            
            return dp[i][prev];
            
        }
        
        if(a[i] == prev) {
            
            dp[i][prev] = hot[a[i]] + solve(i + 1, a[i - 1], dp);
            
            return dp[i][prev];
            
        }
        
        dp[i][prev] = cold[a[i]] + Math.min(solve(i + 1, a[i - 1], dp), solve(i + 1, prev, dp));
        
        return dp[i][prev];
        
    }
    
    static void solve() {
        
        long dp[][] = new long[n][k + 1];
        
        fill(dp);
        
        long cost = cold[a[0]];
        
        cost += solve(1, a[0], dp);
        
        System.out.println(cost);
        
    }
    
    public static void main(String args[]) {
        
        testCases = in.nextInt();
        
        for(int t = 0; t < testCases; ++t) {
            
            n = in.nextInt();
            k = in.nextInt();
            
            a = new int[n];
            
            for(int i = 0; i < n; ++i) {
                
                a[i] = in.nextInt();
                
            }
            
            cold = new long[k + 1];
            hot = new long[k + 1];
            
            for(int i = 1; i <= k; ++i) {
                
                cold[i] = in.nextLong();
                
            }
            
            for(int i = 1; i <= k; ++i) {
                
                hot[i] = in.nextLong();
                
            }
            
            solve();
            
        }
     
    }
    
    static void fill(long dp[][]) {
        
        for(int i = 0; i < n; ++i) {
            
            for(int j = 0; j <= k; ++j) {
                
                dp[i][j] = -1L;
                
            }
            
        }
        
    }
    
}
