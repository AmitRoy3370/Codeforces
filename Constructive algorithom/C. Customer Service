static int C(int i, int j, long A[][], int count) {

        if (j >= n) {

            return count;

        }

        if (equal(A[i][j], 1L)) {

            count = Integer.parseInt(sum(count + "", "1"));

            return C(i, j + 1, A, count);

        } else {

            return count;

        }

    }

    static void C(int i, ArrayList1<Integer> list) {

        if (i >= n) {

            return;

        }

        int count = C(i, 0, A, 0);

        count = Math.min(n - 1, count);

        if (isSmaller("0", count + "")) {

            list.add(count);

        }

        C(i + 1, list);

    }

    static void C(int t) {

        ArrayList1<Integer> list = new ArrayList1<>();

        for (int i = 0; i < n; ++i) {

            reverse(A[i]);

        }

        C(0, list);

        b = new long[list.size()];

        int index = 0;

        while (!list.isEmpty()) {

            b[index++] = list.get(0);

            list.popFront();

        }

        sort(b, 0, b.length - 1);

        long value = 0;

        for (long i : b) {

            if (equal(i, value + 1) || isSmaller((value + 1) + "", i + "")) {

                ++value;

            }

        }

        ++value;

        ans.append(value);

        if (t != testCases) {

            ans.append("\n");

        }

    }
