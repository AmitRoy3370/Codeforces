import java.util.Scanner;

public class B_Playing_in_a_Casino {
	
	static int testCases, n, m;
	
	static long a[][];
	
	static Scanner in = new Scanner(System.in);
	
	static void solve() {
		
		for(int i = 1; i <= m; ++i) {
		    
		    sort(a[i], 0, n);//mlog(n)
		    
		}
		
		long ans = 0L;
		
		for(int i = 1; i <= m; ++i) {
		    
		    long sum = 0L;
		    
		    for(int j = 1; j <= n; ++j) {
		        
		        ans += (j - 1) * a[i][j] - sum;
		        
		        sum += a[i][j];
		        
		    }
		    
		}
		
		System.out.println(ans);
		
	}
	
	public static void main(String [] priya) {
		
		testCases = in.nextInt();
		
		for(int t = 0; t < testCases; ++t) {
			
			n = in.nextInt();
			m = in.nextInt();
			
			a = new long[m + 1][n + 1];
			
			for(int i = 1; i <= n; ++i) {
				
				for(int j = 1; j <= m; ++j) {
					
					a[j][i] = in.nextLong();
					
				}
				
			}
			
			solve();
			
		}
		
	}
	
	static void print(long a[][]) {
		
		for(long i[] : a) {
			
			for(long j : i) {
				
				System.out.print(j + " ");
				
			}
			
			System.out.println();
			
		}
		
		
	}
	
    static void merge(long a[], int left, int right, int mid) {

        int n1 = mid - left + 1, n2 = right - mid;

        long L[] = new long[n1];

        long R[] = new long[n2];

        for (int i = 0; i < n1; i++) {

            L[i] = a[left + i];

        }

        for (int i = 0; i < n2; i++) {

            R[i] = a[mid + 1 + i];

        }

        int i = 0, j = 0, k1 = left;

        while (i < n1 && j < n2) {

            if (L[i] <= R[j]) {

                a[k1] = L[i];

                i++;

            } else {

                a[k1] = R[j];

                j++;

            }

            k1++;

        }

        while (i < n1) {

            a[k1] = L[i];

            i++;

            k1++;

        }

        while (j < n2) {

            a[k1] = R[j];

            j++;
            k1++;

        }

    }

    static void sort(long a[], int left, int right) {

        if (left >= right) {

            return;

        }

        int mid = (left + right) / 2;

        sort(a, left, mid);

        sort(a, mid + 1, right);

        merge(a, left, right, mid);

    }

}
