
    static void D(int t) {

        prefix = new long[n + 2];
        suffix = new long[n + 2];

        for (int i = 1, index = 0; i <= n; ++i) {

            prefix[i] = prefix[i - 1];

            if (index < m && b[index] <= a[i - 1]) {

                prefix[i]++;
                ++index;

            }

        }

        for (int i = n, index = m - 1; i >= 1; --i) {

            if (index >= 0 && b[index] <= a[i - 1]) {

                if (i == n) {

                    suffix[i] = 1;
                    --index;

                } else {

                    suffix[i] = suffix[i + 1] + 1;
                    --index;

                }

            } else {
                
                if(i + 1 <= n) {
                    
                    suffix[i] = suffix[i + 1];
                    
                }
                
            }

        }
       
        K = Long.MAX_VALUE;
        
        for(int i = 0; i <= n; ++i) {
            
            long fromLeft = prefix[i];
            long fromRight = suffix[i + 1];
            
            if(fromLeft + fromRight >= m) {
                
                K = 0;
                break;
                
            }
            
            if(fromLeft + fromRight + 1 >= m) {
                
                K = Math.min(K, b[(int)fromLeft]);
                
            }
            
        }
        
        if(K == Long.MAX_VALUE) {
            
            K = -1;
            
        }
        
        ans.append(K);

        if (t != testCases) {

            ans.append("\n");

        }

    }
