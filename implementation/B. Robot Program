
    static int B(int i, long adder, int index) {

        if (equal(i * 1L, n * 1L)) {

            return index;

        }

        sum = (prefix[i] > 0 && adder > 0) ? Long.parseLong(sum(prefix[i] + "", adder + "")) : prefix[i] + adder;

        if (equal(sum, 0L)) {

            index = Integer.parseInt(sum(i + "", "1"));
            return index;

        } else {

            return B(Integer.parseInt(sum(i + "", "1")), adder, index);

        }

    }

    static void B(int i, long prefix[]) {

        if (equal(i * 1L, n * 1L)) {

            return;

        }

        if (x[i] == 'L') {

            prefix[i] = prefix[i - 1] - 1;

        } else {

            prefix[i] = prefix[i - 1] > 0 ? Long.parseLong(sum(prefix[i - 1] + "", "1")) : prefix[i - 1] + 1;

        }

        B(i + 1, prefix);

    }

    static void B(int t) {

        prefix = new long[n];

        prefix[0] = (x[0] == 'L' ? -1 : 1);

        B(1, prefix);

        int firstCycle = -1;

        firstCycle = B(0, X, firstCycle);

        if (equal(firstCycle, -1L)) {

            ans.append("0");

        } else if (firstCycle > K) {

            ans.append("0");

        } else {

            int countTheResetTimeAtFirstReset = 1;

            int timeNeedForFirstReset = firstCycle;

            int cycleStartingAtZero = -1;

            cycleStartingAtZero = B(0, 0L, cycleStartingAtZero);

            if (equal(cycleStartingAtZero * 1L, -1L)) {

                ans.append(countTheResetTimeAtFirstReset);

            } else {

                long extraCycle = Long.parseLong(sub(K + "", timeNeedForFirstReset + "")) / cycleStartingAtZero;

                sum = Long.parseLong(sum(countTheResetTimeAtFirstReset + "", extraCycle + ""));

                ans.append(sum);

            }

        }

        if (t != testCases) {

            ans.append("\n");

        }

    }
