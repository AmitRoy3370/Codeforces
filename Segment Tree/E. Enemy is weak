import java.util.Scanner;
import java.util.Arrays;

public class Main {
    
    static Scanner in = new Scanner(System.in);
    
    static int n;
    
    static long a[];
    
    private static class Tree {
        
        int N = (int)(1e6 + 10);
        
        long a[] = new long[N];
        
        private void add(int i, int x) {
            
            for(; i < N; i += (i & -i)) {
                
                a[i] += x;
                
            }
            
        }
        
        private int get(int id) {
            
            int r = 0;
            
            for(; id > 0; id -= (id & -id)) {
                
                r += a[id];
                
            }
            
            return r;
            
        }
        
        private int query(int l, int r) {
            
            return get(r) - get(l - 1);
            
        }
        
    }
    
    private static void solve() {
       
        long numberOfWeakPoint = 0L;
        
        Tree tree = new Tree();
        
        Pair pair[] = new Pair[n];
        
        for(int i = 0; i < n; ++i) {
            
            pair[i] = new Pair(a[i], i + 1);
            
        }
        
        Arrays.sort(pair);
        
        for(int i = 0; i < n; ++i) {
            
            tree.add(pair[i].index, 1);
            
            long x = tree.query(pair[i].index + 1, n);
            long y = pair[i].index - tree.query(1, pair[i].index - 1) - 1;
            
            numberOfWeakPoint += x * y;
            
        }
        
        System.out.print(numberOfWeakPoint);
        
    }
    
    public static void main(String[] args) {
        
        input();
        solve();
        
    }
    
    private static class Pair implements Comparable<Pair> {
        
        long element;
        int index;
        
        public Pair(long element, int index) {
            
            this.element = element;
            this.index = index;
            
        }
        
        public int compareTo(Pair pair) {
            
            if(this.element > pair.element) {
                
                return 1;
                
            } else if(this.element < pair.element) {
                
                return -1;
                
            }
            
            return 0;
            
        }
        
    }
    
    private static void input() {
        
        n = in.nextInt();
        
        a = new long[n];
        
        for(int i = 0; i != n; ++i) {
            
            a[i] = in.nextLong();
            
        }
        
    }
    
}
