
    static int[] B(int i, int count[], int current, int length, int uniqueueElement, int left, int right) {

        if (i >= n) {

            return new int[]{current, length, uniqueueElement, left, right};

        }

        if (equal((long) count[(int) a[i]], 1L)) {

            if (equal((long) current, 0L)) {

                uniqueueElement = i;

            }

            current = Integer.parseInt(sum(current + "", "1"));

        } else {

            if (isSmaller(length + "", current + "")) {

                length = current;
                left = uniqueueElement;
                right = i - 1;

            }

            current = 0;

        }

        return B(i + 1, count, current, length, uniqueueElement, left, right);

    }

    static void B(int i, int count[]) {

        if (i >= n) {

            return;

        }

        count[(int) a[i]] = Integer.parseInt(sum(count[(int) a[i]] + "", "1"));

        B(i + 1, count);

    }

    static void B(int t) {

        int count[] = new int[n + 1];

        B(0, count);

        int maxCount = 0;

        for (int i : count) {

            maxCount = Math.max(i, maxCount);

        }

        int length = 0, left = -1, right = -1, current = 0, uniqueElement = 0;

        p = B(0, count, current, length, uniqueElement, left, right);

        current = p[0];
        length = p[1];
        uniqueElement = p[2];
        left = p[3];
        right = p[4];

        if (isSmaller(length + "", current + "")) {

            length = current;
            left = uniqueElement;
            right = n - 1;

        }

        if (length == 0) {

            ans.append("0");

        } else {

            ++left;
            ++right;

            ans.append(left).append(" ").append(right);

        }

        if (t != testCases) {

            ans.append("\n");

        }

    }
