
    static void C(int i, int j, int endIndex, Points point[], _Points copy[]) {

        if (i == endIndex) {

            return;

        }

        copy[j++] = new _Points(point[i].x, point[i].y, point[i].index);

        C(i + 1, j, endIndex, point, copy);

    }

    static void C(int t) {

        Arrays.sort(point); // sort the whole points based on the value x

        _Points leftPoints[] = new _Points[n / 2];// first half storage
        _Points rightPoints[] = new _Points[n - n / 2]; // last half storage

        C(0, 0, n / 2, point, leftPoints); // collect the first half point
        C(n / 2, 0, n, point, rightPoints); // collect the last half point

        Arrays.sort(leftPoints); // sort the first half storage based on y
        Arrays.sort(rightPoints); // sort the last half storage based on y

        StringBuilder sb = new StringBuilder();

        for (int i = 0, j = n / 2 - 1; i < n / 2; ++i) {

            sb.append(leftPoints[i].index).append(" ").append(rightPoints[j--].index);

            // making pair with l(i) and r(n / 2 - i)
            
            if (i != n / 2 - 1) {

                sb.append("\n");

            }

        }

        ans.append(sb.toString());

        if (t != testCases) {

            ans.append("\n");

        }

    }

    private static class Points implements Comparable<Points> {

        long x, y;
        int index;

        public Points() {

        }

        public Points(long x, long y, int index) {

            this.x = x;
            this.y = y;
            this.index = index;

        }

        @Override
        public int compareTo(Points point) {

            if (this.x > point.x) {

                return 1;

            } else if (this.x < point.x) {

                return -1;

            }

            return 0;

        }

    }

    private static class _Points implements Comparable<_Points> {

        long x, y;
        int index;

        public _Points() {

        }

        public _Points(long x, long y, int index) {

            this.x = x;
            this.y = y;
            this.index = index;

        }

        @Override
        public int compareTo(_Points point) {

            if (this.y > point.y) {

                return -1;

            } else if (this.y < point.y) {

                return 1;

            }

            return 0;

        }

    }
